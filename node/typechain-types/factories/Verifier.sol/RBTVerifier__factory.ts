/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  RBTVerifier,
  RBTVerifierInterface,
} from "../../Verifier.sol/RBTVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_pA",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_pB",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_pC",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[1]",
        name: "_pubSignals",
        type: "uint256[1]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061060e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f203275d9bb0532314a6bd2f7390bbb8767002e9fc798f94bc19d97c4df0a0aa481527f0b498c954007fbb8e71cd6d3abe801e512380f34fce3bf8b72dc34fe795980e160208201526101a960008801357f05c5e54417a6d5c5f16dea80f7f871fdf3bd88cf2b75321201a2e6ac1f2b97ed7f0fd5d6fe6427507821b8aec3a425a78bb2d1d83c7aa0fd306c1cbb5bf9e27d7c8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2464dea2e438c136c247dd908b69541420ca238b62d0dd06d00298c7b529da2060c08301527f1be0d2b24775e37a2dff805a03a77d92d9c8f8327562c5563f1eae16f7da6fd160e08301527f2f8297df2b2c1403d62c6e11ddb05e1d1e2a0761b497f3349f0294fa4965f21b6101008301527f2a31c7b3ba5b544c188249c97fd87770ae4fd12a8978b52052c96b91db62421d6101208301527f1526a5b31162468928dbe4b01ca3a40f42f41f6eaf92bc5dcbd373622fa87aac6101408301527f13bc80607c6883b15e73af6be5d7eca9fd73e09a9771a754f76a059cac841977610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212204796c46674ba1ea2c3730783ae374e0199a42412ee62818ab59c25f63d595ebd64736f6c63430008180033";

type RBTVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RBTVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RBTVerifier__factory extends ContractFactory {
  constructor(...args: RBTVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RBTVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RBTVerifier__factory {
    return super.connect(runner) as RBTVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RBTVerifierInterface {
    return new Interface(_abi) as RBTVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RBTVerifier {
    return new Contract(address, _abi, runner) as unknown as RBTVerifier;
  }
}
