/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RBTOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployRBT"
      | "getReversePeriod"
      | "isRBTtoken"
      | "submitProof"
      | "verifyProof"
      | "verifySahayak"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProofVerified"
      | "RBTDeployed"
      | "SahayakRegistered"
      | "SahayakUnregistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployRBT",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReversePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRBTtoken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySahayak",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deployRBT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReversePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRBTtoken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySahayak",
    data: BytesLike
  ): Result;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [sender: AddressLike, commitment: BigNumberish];
  export type OutputTuple = [sender: string, commitment: bigint];
  export interface OutputObject {
    sender: string;
    commitment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RBTDeployedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SahayakRegisteredEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SahayakUnregisteredEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RBTOracle extends BaseContract {
  connect(runner?: ContractRunner | null): RBTOracle;
  waitForDeployment(): Promise<this>;

  interface: RBTOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployRBT: TypedContractMethod<
    [name_: string, symbol_: string, decimals_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReversePeriod: TypedContractMethod<[], [bigint], "view">;

  isRBTtoken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  submitProof: TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;

  verifyProof: TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: [BigNumberish]
    ],
    [boolean],
    "view"
  >;

  verifySahayak: TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployRBT"
  ): TypedContractMethod<
    [name_: string, symbol_: string, decimals_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReversePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRBTtoken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: [BigNumberish]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifySahayak"
  ): TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RBTDeployed"
  ): TypedContractEvent<
    RBTDeployedEvent.InputTuple,
    RBTDeployedEvent.OutputTuple,
    RBTDeployedEvent.OutputObject
  >;
  getEvent(
    key: "SahayakRegistered"
  ): TypedContractEvent<
    SahayakRegisteredEvent.InputTuple,
    SahayakRegisteredEvent.OutputTuple,
    SahayakRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SahayakUnregistered"
  ): TypedContractEvent<
    SahayakUnregisteredEvent.InputTuple,
    SahayakUnregisteredEvent.OutputTuple,
    SahayakUnregisteredEvent.OutputObject
  >;

  filters: {
    "ProofVerified(address,uint256)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "RBTDeployed(address)": TypedContractEvent<
      RBTDeployedEvent.InputTuple,
      RBTDeployedEvent.OutputTuple,
      RBTDeployedEvent.OutputObject
    >;
    RBTDeployed: TypedContractEvent<
      RBTDeployedEvent.InputTuple,
      RBTDeployedEvent.OutputTuple,
      RBTDeployedEvent.OutputObject
    >;

    "SahayakRegistered(address)": TypedContractEvent<
      SahayakRegisteredEvent.InputTuple,
      SahayakRegisteredEvent.OutputTuple,
      SahayakRegisteredEvent.OutputObject
    >;
    SahayakRegistered: TypedContractEvent<
      SahayakRegisteredEvent.InputTuple,
      SahayakRegisteredEvent.OutputTuple,
      SahayakRegisteredEvent.OutputObject
    >;

    "SahayakUnregistered(address)": TypedContractEvent<
      SahayakUnregisteredEvent.InputTuple,
      SahayakUnregisteredEvent.OutputTuple,
      SahayakUnregisteredEvent.OutputObject
    >;
    SahayakUnregistered: TypedContractEvent<
      SahayakUnregisteredEvent.InputTuple,
      SahayakUnregisteredEvent.OutputTuple,
      SahayakUnregisteredEvent.OutputObject
    >;
  };
}
